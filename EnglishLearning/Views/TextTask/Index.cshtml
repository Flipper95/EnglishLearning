@model EnglishLearning.Models.TextTask
@{
    ViewBag.Title = "Текст";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles{
    <link rel="stylesheet" href="@Url.Content("~/Content/TextTask.css")">
}

<h2 class="mb-4">@Model.Name</h2>

<div id="text" class="text-monospace text-justify">
    @Html.Raw(new HtmlString(Model.Text))
</div>
<div class="d-flex flex-row col-12 flex-sm-wrap m-1 fixed-bottom bg-transparent" style="overflow-x:auto;" id="question"> @*ondrop="drop(event, this)" ondragover="allowDrop(event)"*@
    @for (int i = 0; i < ViewBag.Answers.Count; i++) {
        <div id="block_@i" class="btn btn-purple m-1 letter">@ViewBag.Answers[i]</div> @*draggable = "true" ondragstart = "drag(event)"*@
    }
</div>

<div class="d-flex flex-column align-items-center">
<button id="CheckBtn" name="CheckBtn" class="btn btn-purple col-8 col-md-6 col-lg-4 mt-2" type="button" data="@Url.Action("CheckResult","TextTask", new { area=""})">Перевірка результату</button>
<a id="NextBtn" name="NextBtn" class="btn btn-teal text-white col-8 col-md-6 col-lg-4 mt-2" href="javascript:window.location.reload();" hidden data="@Model.TextId">Наступний текст</a>
</div>

<script type="text/javascript">
    var index = 1;
    var number = 1;
    $(".wordPlaceholder").each(function () {
        $(this).prop("id", number + "_answer").prop("tabindex", number);
            //.attr("ondrop", "drop(event, this)").attr("ondragover", "allowDrop(event)");
        number++;
    });

    $(".letter").on("click", function () {
        var id = $(this).parent().attr("id");
        if (id === "question") {
            if (index >= number || $("#" + index + "_answer").children().length > 0) {
                index = findEmptyIndex();
            }
            $("#" + index + "_answer").text("").append($(this));
            index++;
        }
        else {
            $("#question").append($(this));
            $("#" + id).text("___");
            index = findEmptyIndex();
        }
        if (index < number) {
            index = findEmptyIndex();
            $("#" + index + "_answer").focus();
        }
    });

    $(".wordPlaceholder").on("click", function () {
        var temp = $(this).prop("id");
        $(this).focus();
        index = parseInt(temp);
    });

    var findEmptyIndex = function () {
        var el = $(".wordPlaceholder:not(:has(*))").first();
        var id = el.prop("id");
        return parseInt(id);
    }

        $("#CheckBtn").on("click", function () {
            $("#CheckBtn").prop("hidden", true);
            $(".letter").off("click").addClass("disabled").addClass("active");//.prop("draggable", false);
            $("#NextBtn").removeAttr("hidden");

            //var text = "";
            var text = new Array();
            $(".wordPlaceholder").each(function () {
                text.push($(this).text());
                //text += $(this).text();
            });
            //var link = $("#CheckBtn").attr(data);
        $.ajax({
                type: "POST",
                url: "TextTask/CheckResult",
                data: { id: $("#NextBtn").attr("data"), text: text },
                success: function (data) {
                    AjaxResult(data);
                },
            dataType: "json"
        });
    });


    var AjaxResult = function (result) {
        var el = $(".wordPlaceholder .active");
        el.removeClass("btn-purple");
        var i = 0;
        var answer = result;
        el = $(".wordPlaceholder");
        el.each(function () {
            var btnActive = $(this).children(".active");
            if (btnActive.length > 0) {
                var text = $(this).children(".active").html();
                if (text === answer[i]) {
                    $(this).children(".active").addClass("btn-success");
                }
                else {
                    $(this).children(".active").addClass("btn-danger");
                }
            }
            i++;
            //var text = $(this).html();
            //if (text === answer[i]) {
            //    $(this).addClass("btn-success");
            //}
            //else {
            //    $(this).addClass("btn-danger");
            //}
            //i++;
        });
        @*if (result.toLowerCase() == "true") {
            el.addClass("btn-success");
        }
        else {
            el.addClass("btn-danger");
            var answer = @Model.Words.Split(';')
        }*@
    }

    //function allowDrop(ev) {
    //    ev.preventDefault();
    //}

    //function drag(ev) {
    //    ev.dataTransfer.setData("text", ev.target.id);
    //}

    //function drop(ev, el) {
    //    ev.preventDefault();
    //    var data = ev.dataTransfer.getData("text");
    //    el.appendChild(document.getElementById(data));
    //}
</script>

